#!/usr/bin/env php
<?php
/**
 * @author      Payperlez Team <inna@payperlez.org>
 * @copyright   Copyright (C), 2019. Payperlez Inc.
 * @license     MIT LICENSE (https://opensource.org/licenses/MIT)
 *              Refer to the LICENSE file distributed within the package.
 *
 */

require_once __DIR__ . '/vendor/autoload.php';

// error logging to file
ini_set('error_reporting', E_ALL);
ini_set('display_errors', 0);
ini_set('log_errors', 1);
ini_set('error_log', './log/app_error_log_' . date("j.n.Y") . '.log');


use app\Core\Application;

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

$config = [
    'db' => [
        'dsn' => $_ENV['DB_DSN'],
        'user' => $_ENV['DB_USER'],
        'password' => $_ENV['DB_PASSWORD'],

    ],
    'url' => $_ENV['DOMAIN']
];

define('BASE_URL', 'http://' . $config['url'] . '/');
define('STATIC_URL', BASE_URL . 'public/static');
define('MEDIA_URL', BASE_URL . 'public/img');

$app = new Application(__DIR__, $config);

$action = $argv[1] ?? null;
$migrationName = $argv[2] ?? null;
$columns = array_slice($argv, 3); // Get all arguments after the migration name

// SQL type mapping
$typeMapping = [
    'string' => 'VARCHAR(255) NOT NULL',
    'text' => 'TEXT NOT NULL',
    'int' => 'INT NOT NULL',
    'bigint' => 'BIGINT NOT NULL',
    'boolean' => 'TINYINT(1) NOT NULL',
    'timestamp' => 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP'
];

$parsedColumns = [];

foreach ($columns as $column) {
    $parts = explode(":", $column);
    if (count($parts) === 2) {
        $columnName = $parts[0];
        $columnType = strtolower($parts[1]); // Convert to lowercase for mapping

        // Validate type and assign
        if (isset($typeMapping[$columnType])) {
            $parsedColumns[$columnName] = $typeMapping[$columnType];
        } else {
            echo "\033[38;2;255;0;0m Error: Unsupported column type '$columnType' for column '$columnName'.\n";
            exit(1);
        }
    } else {
        echo "\033[38;2;255;0;0m Error: Invalid column format '$column'. Use <column:type>.\n";
        exit(1);
    }
}

// Start migration with dynamic columns
$app->db->startMigration($action, $migrationName, $parsedColumns);
